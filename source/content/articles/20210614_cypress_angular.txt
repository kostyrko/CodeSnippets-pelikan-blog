Title: Cypress + komponenty Angulara
Author: mkostyrko
Date: 2021-06-14 10:00
Updated:
Category: angular
Tags: unfinished, angular, cypress, testy, page objects, app actions
Slug: cypress-angular-komponenty
related_posts:


![git](https://miro.medium.com/max/5872/1*rcewo8BQLzUc_fI-_O7S_w.png)

### Dynamiczne dodawanie atrybutu data-cy w Angularze

atrybut data-cy będzie tworzony na podstawie stringu 'nav' oraz zmiennej *nav*

    <div
        class="nav-item"
        *ngFor="let nav of navSvc.mobileNav"
        [ngClass]="navSvc.getNavClass(nav)"
        (click)="navSvc.setCurrentNav(nav)"
    >
        <span [attr.data-cy]="'nav' + nav">{{ nav }}</span>
    </div>

    wynik

    <span data-cy="navPhotos"> Photos </span>


## App Actions


Cypress jednostkowy

cypress + react -> [@cypress/react](https://github.com/cypress-io/cypress/tree/master/npm/react)

### App Actions w Angularze -> przepis

**app.module.ts**

    [...]
    import { ApplicationRef, DoBootstrap, ErrorHandler, NgModule } from '@angular/core'
    [...]

    @NgModule({
        declarations: [...]
        ],
        imports: [...
        ],
        providers: [...
        ],
    entryComponents: [AppComponent],
    })
    export class AppModule implements DoBootstrap {
    // eslint-disable-next-line class-methods-use-this
    ngDoBootstrap(appRef: ApplicationRef) {
        // bootstrap AppComponent
        appRef.bootstrap(AppComponent)
        // @ts-ignore
        if (window.Cypress) {
        // save the application reference
        // @ts-ignore
        window.appRef = appRef
        }
    }
    }

**some-service.services.ts**

    @Injectable({
    providedIn: 'root',
    })
    export class SomeService {
    [...]

    currentNav = 'Photos'

    constructor(
        private readonly base: SimpleService,
        private readonly http: HttpService,
        private readonly thing: OtherService,
        private readonly scroll: ScrollService,
        private readonly alertsSrvc: AlertService,
    ) {
        // @ts-ignore
        if (window.Cypress) {
        // @ts-ignore
        window.SomeService = this
        }
    }

Wykorzystania

**profile-navigation.ts**

    // funkcja sprawdzająca
    Cypress.Commands.add('getEditProfileService', () => {
        cy.window().should('have.property', 'EditProfileService')
    })

    export class ProfileNavigation {
        [...]
        setNavAppAct(currentNav: string) {
            cy.window().its('EditProfileService').invoke('setCurrentNav', currentNav)
            return this
        }
    }

**index.d.ts**

    declare namespace Cypress {
    interface Chainable {
        getSomeService(): Chainable<object>
        }
    }


export const profileNavigation = new ProfileNavigation()

Zastosowanie

**navigation-profile.spec.ts**

    import { profileNavigation } from '../support/profile-navigation'

    describe('Checks profile'), () => {
        [...]
        it('select should check navigation)', () => {
            profileNavigation.setNavAppAct('Videos')
            [...]
        })
    })


### Page Objects

### JSDoc


Źródła:

[Starting with TypeScript in Cypress](https://filiphric.com/starting-with-typescript-in-cypress)