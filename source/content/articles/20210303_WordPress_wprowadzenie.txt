Title: Wordpress: szybkie wprowadzenie
Author: mkostyrko
Date: 2021-03-03 14:00
Updated:
Category: wordpress
Tags: wordpress, php, local, flywheel
Slug: wordpress-wprowadzenie
related_posts: 

![wordpress](https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/WordPress_blue_logo.svg/600px-WordPress_blue_logo.svg.png)

### Tworzenie projektu przy pomocy Local by Flywheel

Pobranie [Local (Flywheel)](https://localwp.com/) i przy jego pomocy stworzenie nowego projektu

### Administracja zawartością strony przy pomocy WordPresa

administracja -> .local/wp-admin

### Tworzenie nowego motywu

Pliki związane z motywem znajdują się w folderze `themes` w `wp-content`

Home/Local Sites/nazwa_projektu/app/public/wp-content/themes

### Instalacja PHP/Ubuntu

Instalacja php jest opcjonalna a nie wymagana, pozwala np. na wsparcie narzędzi VSC

1) Instalacja Apach

    sudo apt update
    sudo apt install apache2

Sprawdzenie czy Apach pracuje

    sudo systemctl status apache2

Instalacja PHP

    sudo apt install php libapache2-mod-php

Instalacja rozszerzeń PHP

    sudo apt install php-[extname]

### VSC + PHP

**Ustawienia/Preference -> User Snippets -> html**

wklej:


    "php": {
        "prefix": "php",
        "body": [ "<?php $1 ?>" ],
        "description": "php tag"
    }

źródło: [PHP block shortcut in Visual Studio Code](https://stackoverflow.com/questions/48624475/php-block-shortcut-in-visual-studio-code)

---

### PHP

<?php ?> - początek i koniec PHP kod jest zamknięty pomiędzy `<?php` `a ?>`

echo - output na stronę (print/console.log)


Przykładowy kod

    <?php 2+2?>

`;` - średnik działa jako koniec zadania i jest niezbędny

`$zmienna` - znak dolara informuje o deklaracji zmiennej

    // #experiment.php
    <?php echo 2+4;
      $myname = 'Mikolajek';
    ?>
    <h1>This is all about <?php echo $myname?></h1>


### Funkcje


    <?php
      function greet($name,$planet)
      {
          echo "<p>Hi, my name $name and I from planet $planet</p>";
      }

      greet('R2D2', 'Naboo');
      greet('C-3PO', 'Tatooine');
    ?>


### Tablice + while loop


    <?php 

      $droids = array('C3PO', 'R2D2');

      $count = 0;

      // while($count < 10) {
      //   echo "<li>$count</li>";
      //   $count++;
      // }

      while($count < count($droids)) {
        echo "<li>Hi my name is $droids[$count]</li>";
        $count++;
      }

    ?>

    <p> I am: <?php echo $droids[1] ?></p>

#### Tablica asocjacyjna

Tablica asocjacyjna zachowaniem przypomina obiekt znany z JS lub słownik znany z Pythona, gdzie kluczowi przypisany jest odpowiedni wpis/obiekt/"byt" i za jego pomocą jest on wywoływany (format zapisu nie znajduje analogi we wcześniej przytoczonych przykładach)

    $droids = array(
      'c3po' => 'protocol droid',
      'r2d2' => 'astromech droid'
    )

    echo $droids['c3po']
    // protocol droid



---

### WordPress

Funkcja pozwalająca na wyświetlanie informacji związanych z blogiem -> bloginfo()

    bloginfo('name')

    bloginfo('description')

Przykładowo

<?php
    bloginfo('name');
    bloginfo('description');
 ?>

---

#### Wyświetlanie postów

    theme_folder
      |
      |
      |-index.php
      |-screenshot.png
      |-style.css
      |
      |-single.php


**single.php** - plik zawierający informację dla pojedynczego postu (jeśli go nie ma to wówczas WordPresa przyjmie zawartość index.php jako wzór), podobnie sprawy się mają w przypadku podstron gdzie plik powinien nosić nazwę **page.php** - może on natomiast zawierać treść zbliżoną lub taką samą jak **single.php** i jest oparty na **while loopie** podstawowym "narzędziu" renderującym treść dla WordPresa

    <?php 
      while (have_posts(  )) {
        the_post(); ?>
        <h2><?php the_title(); ?></h2>
        <?php  the_content(); ?>
      <?php }
    ?>

gdzie index.php

    <!-- pobiera 10 ostatnich postów -->
    <?php 
      while (have_posts(  )) {
        the_post(); ?>
        <h2><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h2>
        <?php  the_content(); ?>
      <?php }
    ?>

---

#### Header & footer

    theme_folder
          |
          |
          |-index.php
          |-screenshot.png
          |-style.css
          |-single.php
          |
          |-header.php
          |-footer.php


header.php -> head jest obsługiwany przez `<?php wp_head(); ?>`

    <!DOCTYPE html>
    <html lang="en">
    <head>
      <?php wp_head(); ?>
    </head>
    <body>
    <header class="site-header">
          [...]
    </header>

footer.php -> footer jest obsługiwany przez `<?php wp_footer() ?>`


    // footer.php
      <footer>
        [...]
      </footer>
    <?php wp_footer() ?>
    </body>
    </html>


gdzie index.php pobiera od nich dane poprzez get_[...]

    // index.php
    <?php get_header(); ?>

        <div class="page-banner">
          [...]
        </div>

    <?php  get_footer();?>


#### Media

Pobieranie mediów przy pomocy: `echo get_theme_file_uri('/folder/file.jpg')`


    [...]
    <div class="page-banner">
          <div class="page-banner__bg-image" style="background-image: url(<?php echo get_theme_file_uri('/images/library-hero.jpg') ?>);"></div>
    [...]


---

#### Podłączanie CSS i JS oraz Fontów -> functions.php

    theme_folder
          |
          |
          |-index.php
          |-screenshot.png
          |-style.css
          |-single.php
          |-header.php
          |-footer.php
          |
          |-functions.php


1 - add_action('wp_enqueue_scripts', 'dowolna_nazwa_funkcji'); // podłączenie się do konkretnej, danej akcji, po której ma się wykonać podany kod

2- stworzenie funkcji włączającej odpowiednie 'zależności'


    // functions.php
    <?php

      // function for loading in CSS files
      function university_files()
      {
        wp_enqueue_style('custome-google-fonts', '//fonts.googleapis.com/css?family=Roboto+Condensed:300,300i,400,400i,700,700i|Roboto:100,300,400,400i,700,700i');

        // loading font-awesome
        wp_enqueue_style('font-awesome', '//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css');

        // loading CSS
        wp_enqueue_style('university_main_styles', get_stylesheet_uri());
        
        // for a loading JS file, (directory/file), dependencies, version nr, load before closing body tag = true
        wp_enqueue_script('main-university-js', get_theme_file_uri('/js/scripts-bundled.js'), NULL, '1.0', true);
      }

      // call action(when, which), wp_enqueue_scripts - right before you run the action -> scripts hook/run styles
      add_action('wp_enqueue_scripts', 'university_files');

    ?>

#### Dynamiczne klasy

**body_class();** - funkcja, która w zależności od kontekstu (np. id, etc.) do wstawionego znacznika przypisuje (generuje) odpowiednie mu klasy np."home blog", "page-template-default page page-id-18 page-child parent-pageid-12"


    [...]
      <body <?php body_class(); ?>>
    [...]



### Wordpress/PHP & Echo

Echo można rozumieć jako odpowiednik console.log() znanego z JS lub print() z pythona z tym, że w przypadku Wordpressa kanwą jest html. Zatem za każdym razem gdy dana wartość znajduje się pomiędzy tagami okalającymi kod PHP i ma ona zostać wyświetlona na stronie powinna być poprzedzona słowem kluczowym `echo`.

Część funkcji wbudowanyhc WordPresie zawiera już w sobie wyrażenie echo, inne natomiast wymagają jego użycia w momencie gdy ma zostać ono wyświetlone na stronie internetowej.

Ogólna zasada jakiej można się trzymać jest ta, wg. której funkcje zaczynające się na `the` zawierają echo a te zaczynające się na `get` go nie posiadają -> **the - zawiera / get - nie zawiera** np. `the_ID();` vs `get_the_id();`
 
---

Źródła:

[How to Install PHP on Ubuntu 20.04](https://linuxize.com/post/how-to-install-php-on-ubuntu-20-04/)

[LearnWebCode/university-static](https://github.com/LearnWebCode/university-static)

[Udemy - Become a WordPress Developer: Unlocking Power With Code](https://www.udemy.com/course/become-a-wordpress-developer-php-javascript)

[codex.wordpress.org](codex.wordpress.org)

[developer.wordpress.org](developer.wordpress.org)